- interface
 default, static methods
 
 StringJoiner class:
 - final class and present in java.util.* package
 - used to construct a sequence of characters separated by delimiter.
 - now you can create string by passing delimiter like comma(,) hyphen(-) etc
 - you can also add prefix and suffix
 
 Parallel Array sorting:
 - provides new feature in Array class which is used to sort Array element parallel
 - parallelSort() has added in java.util.Arrays class which provides array sorting
 - this method is overloaded for all the primitive data types and Comparable objects
 
 Optional:
 - final class introduced in a Java8
 - it is used to deal with NullPointerException in java
 - it provides methods which are used to check the presence of value for perticular variable
 
 Lambda Expression:
 - it is an anonymous function/method means it's a method without declaration i.e. access-modifier, return type and method name.
 - function that doesn't have a name and doesn't belongs to any class.
 - it is useful in places where a method is being used only once and method definition is short
 - it allows you to write a method in the same place where you are going to use it.
 - it saves your effort of declaring and writing a separate method to the containing class.
 - In java, lambda expressions are represented as object and they must be bound to a perticuler object type known as Functional interface.
 
 Functional interface : it is an interface which contains only 1 abstract method.Ex.Runnable, Comparable, Comparator
 
 public-modifier return-type methodname(parameter-list)
 {
 //....
 }
 
 syntax:
 (parameter-list) -> {body}
 ex.
 (a,b) -> a+b;
 (String s) -> System.out.println(s);
 
 rules:
 - can have zero, 1 or more parameter
 - type of parameter can be explicitly declared or it can be inferred from the context
   For ex. (int a) is same as (a)
 - when there is a single parameter it is not mandatory to use parenthesis
   For ex. a -> a*a; 
 - body of lambda expression can contain 1 or more statements
 - if body of lambda expression has single statement, curly brackets are not mandatory, but for more than 1 statement it is mandatory
 
 forEach method:
 
 collectionObj.forEach(lambdaExpression)
 

 1.create a functional interface with a method square(int n) and implement lambda expression
 2.create a functional interface with a method circle(float r)and implement lambda expression
 3.create a functional interface with a method simpleInterest(float p,float n, float r)and implement lambda expression
 4.create a functional interface with a method percentage(double m1,double m2, double m3)and implement lambda expression
 
 Stream:
 - it is used to process collection of objects
 - it is sequence of objects that supports various methods which can be pipelined to produce desired result
 - if we want to represent a group of object as a single entity then we should go for collection, if you want to process objects from collection then
   we should go with Stream
   
   How to create a Stream
   1.create a stream
   2.perform intermediate operation.There can be more than 1 intermediate operation
   3.perform terminal operation to get the result
   
  Features:
  - A stream is not a data structure instead it takes input from collection, array etc.
  - Streams don't change the original data structure, they only provide the result as per the pipeline methods
  - Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate operations can be pipelined
  - terminal operation marks the end of the stream and returns the result

 Stream - List  => collect()
 
 Method Reference:
 - shorthand notation of lambda expression to call a method
 - ex. str -> System.out.println(str)
 - you can replace above lambda expression with method reference
   ex.   System.out::println
 - :: operator is used in method reference to separate the class or object from the method name
 
 
 anyMatch():
 - this method returns true if any element of the stream matches the given Predicate.
 
 noneMatch():
 - opposite to anyMatch
 - it returns true if none of the stream elements matches the given predicate, returns false if any of the stream element matches the given predicate
 
 allMatch():
 - returns true if all the elements of stream satisfy the given predicate else it returns false
 
 
 # Mostly used in Advanced java 
 Date and Time API:
 Before Java8, there was a java.util.Date class to create and handle date and time but that has some limitations.
 
 Drawbacks:
 1.Thread Safety:
 -existing classes such as Date and Calendar does not provide thread safety, hence it leads to concurrency issue that are needed to be taken care by developers.
  the new Date/Time API provides thread safety and are immutable, hence avoiding concurrency issues from developers
 2.Bad API desinging:
 -Date and Calendar does not provide methods to perform basic day to day functionality but java8 classes provides different methods for performing operations
  regarding date and time
 3.Difficult time zone handling:
 -to handle the time zone using Date and Calendar classes is difficult because developers were supposed to write logic for it, with new API Time zone handling
  can be easily done with ZonedDateTime API.
  
  LocalDate class:
  immutable class that represent date with a default format of yyyy-MM-dd
  
  LocalTime class:
  immutable class that represent time with a default format of hours-minutes-seconds
  
  LocalDateTime:
  immutable date-time class that represent a date-time with the default format as yyyy-MM-dd hh-mm-ss.zzz
  
  ZonedDateTime:
  immutable class that represent date-time with zone
  
  now() :current date-time
  of(int,int,int): 
  parse(String):
  
  
 ************************************************************************************************************ 
    ##Project
core java mini projects:  
Library Mgmt System
Hotel Mgmt system
Hospital Mgmt System
Student Information System
ATM Machine
Salary Magmt System
Career Information Mgmt System
Course Mgmt System
Event Mgmt System
Electricity Billing System
Book store Mgmt
Medical Mgmt system
Stock Mgmt system
Telephone Billing System
Travel Mgmt System
Campain Mgmt System
University Admission Mgmt System
Content Mgmt System
Student Result Processing system
Labour Mgmt system
school mgmt system
 
 
 - only console application,no database, no GUI
 - follow all the naming convention otherwise you'll get zero marks
 - include oops,collection,handle exception(custom exception)
 - unit testing(added advantage)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 